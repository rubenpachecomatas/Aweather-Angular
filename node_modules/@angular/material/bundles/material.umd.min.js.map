{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.3.5');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const selectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes.disableRipple;\n\n    if (disableRippleChanges && !disableRippleChanges.firstChange) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list' && _elementRef) {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes['svgIcon']) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsDisabledState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsDisabledState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's disabled state with the individual chips. */\n  private _syncChipsDisabledState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': '_hasAriaLabel ? ariaLabel : null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  /**\n   * Whether the button should have an `aria-label`. Used for clearing the\n   * attribute to prevent it from being read instead of the button's text.\n   */\n  _hasAriaLabel?: boolean;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (typeof this._hasAriaLabel === 'undefined') {\n      const element = this._elementRef.nativeElement;\n\n      if (element.hasAttribute('mat-icon-button')) {\n        this._hasAriaLabel = true;\n      } else {\n        const buttonTextContent = element.textContent;\n        this._hasAriaLabel = !buttonTextContent || buttonTextContent.trim().length === 0;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange =\n        changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n\n    if (changes.ariaLabel) {\n      this._hasAriaLabel = !!changes.ariaLabel.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    const zone = this._ngZone;\n\n    if (zone) {\n      // Note that we have to run outside of the `NgZone` explicitly,\n      // in order to avoid throwing users into an infinite loop\n      // if `zone-patch-rxjs` is included.\n      zone.runOutsideAngular(() => {\n        zone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n          if (this._outlineGapCalculationNeededOnStable) {\n            this.updateOutlineGap();\n          }\n        });\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatNestedTreeNode","prototype","ngAfterContentInit","_super","call","this","ngOnDestroy","type","Directive","args","selector","exportAs","host","[attr.aria-expanded]","[attr.role]","class","inputs","providers","provide","CdkNestedTreeNode","useExisting","CdkTreeNode","CDK_TREE_NODE_OUTLET_NODE","ElementRef","CdkTree","IterableDiffers","String","decorators","Attribute","node","Input","nodeOutlet","ContentChildren","MatTreeNodeOutlet","descendants","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","tslib_1.__extends","CdkTreeNodePadding","level","indent","MatTree","Component","template","role","styles","encapsulation","ViewEncapsulation","None","propDecorators","MatTreeNodeToggle","_this","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeNodeDef","MatTreeNode","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabBody","position","_positionIndex","_computePositionAnimationState","ngOnInit","_position","origin","_computePositionFromOrigin","_dirChangeSubscription","unsubscribe","_translateTabComplete","complete","_onTranslateTabStarted","event","isCentering","_isCenterPosition","toState","_beforeCentering","emit","_onCentering","_elementRef","nativeElement","clientHeight","_getLayoutDirection","_dir","dir","changeDetection","ChangeDetectionStrategy","OnPush","animations","matTabsAnimations","translateTab","ChangeDetectorRef","_afterLeavingCenter","Output","_onCentered","_portalHost","ViewChild","PortalHostDirective","_content","animationDuration","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","Subject","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","element","bindEvent","fromEvent","takeUntil","_stopInterval","runOutsideAngular","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","_node","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","_tree","Number","[attr.aria-level]","CdkTreeNodeDef","_differs","MatStepHeader","errorMessage","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","distinctUntilChanged","x","y","fromState","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","changeDetectorRef","_orientation","ctorParameters","MatStepperNext","(click)","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_getDefaultTextForState","_right","_left","_end","_start","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","drawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","mode","_width","opened","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_element","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_message","_manualListeners","_scrollStrategy","scrollStrategy","elementStyle","hasGestures","window","Hammer","hammerLoader","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_defaultOptions","MatTooltip","_updatePosition","_tooltipInstance","updatePosition","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","showDelay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","hideDelay","isVisible","e","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_handleTouchStart","_menuItemInstance","_triggersSubmenu","triggersSubmenu","MatMenuTrigger","menu","_menu","_menuCloseSubscription","reason","_destroyMenu","_parentMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","_closingActionsSubscription","_menuOpen","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatListOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","_hasAriaLabel","buttonTextContent","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_syncChipsDisabledState","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_labelChild","MatLabel","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","MatPlaceholder","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","zone","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}